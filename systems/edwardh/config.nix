{ config, inputs, pkgs, lib, ... }:
let
  mailboxMappings = import ./mailbox-mappings.nix;
  mailboxList = builtins.map (m: m.mailbox) mailboxMappings;
  autoScript = builtins.concatStringsSep "\n" (builtins.map
    (m: ''
      if address :contains "From" "${m.username}" {
        fileinto "${m.mailbox}";
        stop;
      }'')
    mailboxMappings);
in
{
  imports = [
    (builtins.fetchTarball {
      # nixos-unstable as of 2025-04-07
      url = "https://gitlab.com/simple-nixos-mailserver/nixos-mailserver/-/archive/b4fbffe79c00f19be94b86b4144ff67541613659/nixos-mailserver-b4fbffe79c00f19be94b86b4144ff67541613659.tar.gz";
      sha256 = "0r8c0mkj7cn2cz0r6m45h51w5qwf2cyiiv956bz75p3fcps4qj1n";
    })
  ];

  #  services.openssh = {
  #allowSFTP = true;
  #settings = {
  #PasswordAuthentication = lib.mkForce true;
  #HostKeyAlgorithms = "ssh-ed25519,ssh-rsa";
  #Macs = [
  #"hmac-sha2-512-etm@openssh.com"
  #"hmac-sha2-256-etm@openssh.com"
  #"umac-128-etm@openssh.com"
  #"hmac-sha2-256"
  #];
  #};
  #};
  #users.users.rdm = {
  #isNormalUser = true;
  #description = "Rail Data Marketplace";
  #password = "letmein"; # this will cause no problems
  #};

  networking.firewall.interfaces.ens5 = {
    allowedTCPPorts = [
      80 # HTTP
      443 # HTTPS

      53 # DNS
      22 # SSH
      822 # railreader
    ];
    allowedUDPPorts = [
      # QUIC
      80 # HTTP
      443 # HTTPS

      53 # DNS
      51800 # wg0
    ];
  };
  networking.firewall.interfaces.wg0 = {
    allowedTCPPorts = [
      9002 # node exporter
    ];
  };

  services.fail2ban = {
    enable = true;
    bantime = "8h";
    bantime-increment = {
      enable = true;
      rndtime = "30m";
      maxtime = "168h";
    };
    jails = {
      sshd.settings = {
        enabled = true;
        mode = "aggressive";
      };
      dovecot.settings = {
        enabled = true;
        mode = "aggressive";
      };
      postfix.settings = {
        enabled = true;
        mode = "aggressive";
      };
    };
  };

  age.secrets.mail-hashed-password.file = ../../secrets/mail-hashed-password.age;
  age.secrets.radicale-htpasswd = {
    file = ../../secrets/radicale-htpasswd.age;
    owner = "radicale";
    group = "radicale";
    mode = "400";
  };
  age.secrets.wg0-edwardh-key.file = ../../secrets/wg0-edwardh-key.age;

  # Manually set DNS nameservers, to avoid trying to use our own non-recursive BIND service.
  environment.etc."resolv.conf".text = ''
    # Generated by NixOS
    nameserver 172.16.10.1
  '';

  mailserver = {
    enable = true;
    localDnsResolver = false;

    fqdn = "mail.edwardh.dev";
    sendingFqdn = "edwardh.dev";
    domains = [ "edwardh.dev" ];

    backup.enable = true; # Backup to /var/rsnapshot

    loginAccounts = {
      "inbox@edwardh.dev" = {
        # mkpasswd -sm bcrypt
        hashedPasswordFile = config.age.secrets.mail-hashed-password.path;
        aliases = [ "@edwardh.dev" ];
        sieveScript =
          builtins.concatStringsSep "\n" [ (builtins.readFile ./mail.sieve) autoScript ];
      };
    };

    mailboxes = {
      # Special mailboxes
      Drafts = {
        auto = "subscribe";
        specialUse = "Drafts";
      };
      Junk = {
        auto = "subscribe";
        specialUse = "Junk";
      };
      Sent = {
        auto = "subscribe";
        specialUse = "Sent";
      };
      Trash = {
        auto = "subscribe";
        specialUse = "Trash";
      };
      Archives = {
        auto = "subscribe";
        specialUse = "Archive";
      };

      # non-auto-sorted mailboxes
      "Shipping and Recipts" = { auto = "subscribe"; };
      "School" = { auto = "subscribe"; };
      "Performances" = { auto = "subscribe"; };
      "Music" = { auto = "subscribe"; };
    } // builtins.listToAttrs
      (builtins.map
        (m: { name = m; value = { auto = "subscribe"; }; })
        mailboxList);


    certificateScheme = "acme-nginx";
  };

  services.roundcube = {
    enable = true;
    # Web interface accessible from hostName.
    hostName = "mail.edwardh.dev";
    extraConfig = ''
      $config['smtp_server'] = "tls://${config.mailserver.fqdn}";
      $config['smtp_user'] = "%u";
      $config['smtp_pass'] = "%p";
    '';
  };

  services.radicale = {
    enable = true;
    settings = {
      server.hosts = [ "127.0.0.1:5232" ];
      auth = {
        type = "htpasswd";
        htpasswd_filename = config.age.secrets.radicale-htpasswd.path;
        htpasswd_encryption = "bcrypt";
      };
    };
  };

  # Store zones in /etc so they can be signed without errors due to trying to write to the store.
  systemd.tmpfiles.rules = [
    "d /etc/bind/zones 755 named root -"
    "L+ /etc/bind/zones/db.edwardh.dev - - - - ${./db.edwardh.dev}"
    "z /etc/bind/zones/db.edwardh.dev 744 named root -"
  ];

  services.bind = {
    enable = true;
    extraOptions = ''
      recursion no;
      allow-transfer { none; };
      version "not currently available";
    '';
    zones."edwardh.dev" = {
      master = true;
      file = "/etc/bind/zones/db.edwardh.dev";
      allowQuery = [ "any" ];
      # To get DS record:
      # dig dnskey edwardh.dev | dnssec-dsfromkey -f - edwardh.dev
      extraConfig = ''
        dnssec-policy default;
        inline-signing yes;

        # ${./db.edwardh.dev}
        # The above comment is included so that the bind service will be restarted when the db.edwardh.dev file changes, by including the nix-store path of the file in bind's config.
      '';
    };
  };

  networking.wireguard = {
    enable = true;
    interfaces = {
      wg0 = {
        ips = [ "172.16.10.2/24" ];
        listenPort = 51800;
        privateKeyFile = config.age.secrets.wg0-edwardh-key.path;
        peers = [
          {
            name = "gateway";
            publicKey = "1Gs85rAE+d++lojXtc04P448bXcZNdLZjIx/uWo0pSM=";
            allowedIPs = [ "172.16.0.0/12" ]; # edwardh can connect to server network
          }
        ];
      };
    };
  };

  security.acme.acceptTerms = true;
  security.acme.defaults.email = "security@edwardh.dev";

  services.nginx = {
    enable = true;
    package = pkgs.nginxQuic;
    appendHttpConfig = ''
      map $sent_http_content_type $expires {
        default                    off;
        text/html                  epoch;
        text/css                   1h;
      }
    '';
    appendConfig = ''
      stream {
        upstream railreader {
          server 172.16.3.51:64022;
        }
        server {
          listen 822;
          proxy_pass railreader;
        }
      }
    '';
    virtualHosts = {
      "edwardh.dev" = {
        default = true;

        addSSL = true;
        enableACME = true;
        quic = true;
        http3 = true;
        http3_hq = true;

        locations."/" = {
          root = inputs.edwardh-dev.packages.edwardh-dev;
          extraConfig = ''
            gzip on;
            gzip_types text/html text/css;
            etag on;
            expires $expires;
            add_header Alt-Svc 'h3=":443"; ma=86400';
          '';
        };
      };
      "calendar.edwardh.dev" = {
        forceSSL = true;
        enableACME = true;
        quic = true;
        http3 = true;
        http3_hq = true;

        locations."/" = {
          recommendedProxySettings = true;
          proxyPass = "http://127.0.0.1:5232";
          extraConfig = ''
            add_header Alt-Svc 'h3=":443"; ma=86400';
          '';
        };
        serverAliases = [ "contacts.edwardh.dev" ];
      };
      # Local services
      "cache.edwardh.dev" = {
        forceSSL = true;
        enableACME = true;
        quic = true;
        http3 = true;
        http3_hq = true;

        locations."/" = {
          recommendedProxySettings = true;
          proxyPass = "http://172.16.3.51:8501"; # rpi5-01
          extraConfig = ''
            add_header Alt-Svc 'h3=":443"; ma=86400';
            proxy_read_timeout 300;
          '';
        };
      };
      "lcd.edwardh.dev" = {
        addSSL = true;
        enableACME = true;
        locations."/" = {
          recommendedProxySettings = true;
          proxyPass = "http://172.16.3.42:8019"; # rpi4-02
        };
      };
      "grafana.edwardh.dev" = {
        forceSSL = true;
        enableACME = true;
        quic = true;
        http3 = true;
        http3_hq = true;

        locations."/" = {
          recommendedProxySettings = true;
          proxyWebsockets = true;
          proxyPass = "http://172.16.3.1:3000"; # gateway
          extraConfig = ''
            gzip on;
            gzip_types text/html text/css;
            etag on;
            add_header Alt-Svc 'h3=":443"; ma=86400';
          '';
        };
      };
      "hass.edwardh.dev" = {
        forceSSL = true;
        enableACME = true;
        quic = true;
        http3 = true;
        http3_hq = true;

        locations."/" = {
          recommendedProxySettings = true;
          proxyPass = "http://172.16.3.41:8123"; # rpi4-01
          proxyWebsockets = true;
          extraConfig = ''
            gzip on;
            gzip_types text/html text/css;
            etag on;
            add_header Alt-Svc 'h3=":443"; ma=86400';
          '';
        };
      };
    };
  };
}
